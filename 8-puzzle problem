import heapq
GOAL_STATE = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]
DIRECTIONS = [(-1, 0), (1, 0), (0, -1), (0, 1)]
def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j
def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i][j]
            if value != 0:
                goal_x = (value - 1) // 3
                goal_y = (value - 1) % 3
                distance += abs(goal_x - i) + abs(goal_y - j)
    return distance
def get_neighbors(state):
    neighbors = []
    x, y = find_blank(state)
    for dx, dy in DIRECTIONS:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]  
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors
def state_to_tuple(state):
    return tuple(item for row in state for item in row)
def a_star(start):
    open_set = []
    visited = set()
    heapq.heappush(open_set, (manhattan_distance(start), 0, start, []))
    while open_set:
        est_total_cost, cost_so_far, current_state, path = heapq.heappop(open_set)
        if current_state == GOAL_STATE:
            return path + [current_state]
        visited.add(state_to_tuple(current_state))
        for neighbor in get_neighbors(current_state):
            if state_to_tuple(neighbor) not in visited:
                total_cost = cost_so_far + 1
                estimated_cost = total_cost + manhattan_distance(neighbor)
                heapq.heappush(open_set, (estimated_cost, total_cost, neighbor, path + [current_state]))
    return None
def print_state(state):
    for row in state:
        print(' '.join(str(num) if num != 0 else ' ' for num in row))
    print()
start_state = [
    [1, 2, 3],
    [4, 0, 6],
    [7, 5, 8]
]
solution_path = a_star(start_state)
if solution_path:
    print(f"Solution found in {len(solution_path) - 1} moves:\n")
    for step in solution_path:
        print_state(step)
else:
    print("No solution found.")
